<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Working thoughts]]></title>
  <link href="http://lplotni.github.io/atom.xml" rel="self"/>
  <link href="http://lplotni.github.io/"/>
  <updated>2014-11-09T12:07:55+01:00</updated>
  <id>http://lplotni.github.io/</id>
  <author>
    <name><![CDATA[Lukasz Plotnicki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tech used during last year]]></title>
    <link href="http://lplotni.github.io/blog/2014/11/08/tech-used-during-last-year/"/>
    <updated>2014-11-08T23:18:00+01:00</updated>
    <id>http://lplotni.github.io/blog/2014/11/08/tech-used-during-last-year</id>
    <content type="html"><![CDATA[<p>It has been a while since I posted something here&hellip; A bit more then year acctualy.</p>

<h2>Clever code can hurt</h2>

<p>Scala and Scalatra</p>

<h2>Going fast</h2>

<p>JavaScript, AngularJS
JDK8</p>

<h2>Side project</h2>

<h2>Bleeding edge</h2>

<p>iOS and SWIFT
JDK8, node.js</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scoopcamp Hackathon]]></title>
    <link href="http://lplotni.github.io/blog/2013/09/14/scoopcamp-hackathon/"/>
    <updated>2013-09-14T13:05:00+02:00</updated>
    <id>http://lplotni.github.io/blog/2013/09/14/scoopcamp-hackathon</id>
    <content type="html"><![CDATA[<p>Last Thursday I was a part of the <a href="http://scoopcamp.de/hackathon/">Scoopcamp hackathon</a> and it was so great that I just couldn&rsquo;t resist to write down some of my thoughts about it. Our team <strong>ThoughtWorks and friends</strong> a colorful mix of journalists, students and developers had a rough idea for a modern &ndash; more <strong>agile</strong> &ndash; journalism, where the journalist reporting about an ongoing event writes the background story and live updates from his perspective, but can also incorporate content written by the readers who create their own streams representing their own take on the particular event. Being able to see which stream/entry is getting most likes (=feedback), he/she can quickly react and focus on the currently favorite perspective. During a quick brainstorming we came up with the name: <strong>LiquidPub</strong> (for liquid publishing) and started defining the first user stories.</p>

<!-- More -->


<p><img class="right" src="http://lplotni.github.io/images/liquidpub_screenshot.png" title="Our app" > To be able to deliver something within less than a day of coding, we went with Ruby on Rails. This gave me the opportunity to finally try out Rails and learn it a bit by pairing with some experienced Ruby/Rails devs. The application itself has been deployed on heroku and being ThoughtWorks we built and deployed it after each push to our <a href="https://github.com/thoughtworks/liquid-pub">github repo</a> using <a href="https://www.snap-ci.com/">snap-ci</a> &ndash; <a href="http://martinfowler.com/bliki/ContinuousDelivery.html">continuous delivery</a> FTW!</p>

<p>You can see the result <a href="http://liquid-pub.herokuapp.com/stories/3">here</a>.</p>

<h2>Tech stack</h2>

<ul>
<li>Ruby/Rails + <a href="http://slim-lang.com/">slim</a> (as the templating engine) + <a href="http://foundation.zurb.com/">Foundation</a> CSS lib (for a responsive client)</li>
<li>PostgreSQL</li>
</ul>


<h2>Some stats</h2>

<ul>
<li>4 dev pairs and 1 designer implemented 27 user stories in 6 iterations</li>
<li>I arrived at 8:45 and left around 00:30 (<em>true hackathon sprit! ;)</em>)</li>
<li>91 builds / 145 commits</li>
</ul>


<h2>Wrap-up + My take on Rails</h2>

<p>A day before the hackathon, I got the message that we will do it using Ruby on Rails &ndash; so I did not really have a lot of time to look into it. But that was actually no problem at all, as I paired with another guy who had some rails experience. Although I heard it often, I was still amazed how quickly one can set up a CRUD application with it. There is of course a lot of magic happening in the background and when you have some more complicated use cases, you really need to look deeper into the <a href="http://guides.rubyonrails.org/">rails guide</a> or other documentation. My pair and myself had some issues trying to integrate a <a href="https://github.com/galetahub/rails-ckeditor">WYSIWYG editor</a> which was working in the development mode but not in the production mode due to some assets processing problems. This was the only problem we could not solve quickly. For templates we used slim which is definitely nice, but takes some time getting used to. Otherwise Rails provides as I already expected a very nice developer experience. As I am taking a deeper look into <a href="http://www.playframework.com/">Play2.0</a> now, I can try to write the same application to be able to compare the development speed and experience of both frameworks. A blog post will follow&hellip;
This hackathon was really a great opportunity to have fun and meet new people and try out new technologies. I really look forward to another event like this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GWT: part I]]></title>
    <link href="http://lplotni.github.io/blog/2013/06/15/gwt-part-i/"/>
    <updated>2013-06-15T18:01:00+02:00</updated>
    <id>http://lplotni.github.io/blog/2013/06/15/gwt-part-i</id>
    <content type="html"><![CDATA[<p>Back in 2009 I became the job to design and start realizing a quite large web application for a health care research project. I took some time, sat down and thought about the technology stack, I would like to use to build it. As we wanted to have an RIA and I already had some experience with GWT, we quickly decided to use it. Since then four years have passed and we are about to release the 2.0 version of our system. During this time, the whole team learned a lot about GWT, its advantages and also some disadvantages, and I thought it would be useful to write some of them up. This part is about the <strong>status quo</strong>, in the second part I will try to write about a GWT setup I would go for, when starting the project today &ndash; so if you have any hints in this regard, please feel free to leave a comment, I would definitely appreciate it!</p>

<!--more-->


<h2>1. Client setup</h2>

<p>Around the same time, as I started to draw the first diagrams of the inner life of our web app, Ray Ryan gave a <a href="http://www.youtube.com/watch?v=PDuhR18-EdM">talk at the IO conference</a> about the best practices for GWT app architecture, mentioning the <a href="http://martinfowler.com/eaaDev/uiArchs.html">model view presenter</a>, the usage of an event bus for components communication and the command pattern for dispatching the GWT-RPC calls to the server. Shortly after I discovered the <a href="http://code.google.com/p/gwt-presenter/">gwt-presenter</a> and the <a href="http://code.google.com/p/gwt-dispatch/">gwt-dispatch</a> libraries, offering an easy way to build an GWT app based on the principles from  Ray&rsquo;s talk. I also found a very detailed <a href="http://blog.hivedevelopment.co.uk/2009/08/google-web-toolkit-gwt-mvp-example.html">blog post</a> explaining how everything works together.  <img src="http://lplotni.github.io/images/gwt_mvp.png" title="MVP with EventBus and Dispatcher" > At this point we defined one <strong>Presenter</strong> for all the entities, we wanted to made accessible on the client, and each presenter defined his own <strong>Display</strong> interface which then was implemented by the <strong>View</strong> class. The instantiation of all presenters and views has been managed by <a href="http://code.google.com/p/google-gin/">gin</a> &ndash; a dependency injection framework for the client side. The code looked more or less like this:</p>

<figure class='code'><figcaption><span>Presenter & Display</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HistoryPresenter</span> <span class="kd">extends</span> <span class="n">WidgetPresenter</span><span class="o">&lt;</span><span class="n">HistoryPresenter</span><span class="o">.</span><span class="na">Display</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kd">implements</span> <span class="n">PresentsDTO</span><span class="o">&lt;</span><span class="n">HistoryDTO</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Display</span> <span class="kd">extends</span> <span class="n">WidgetDisplay</span><span class="o">,</span> <span class="n">Resettable</span><span class="o">,</span> <span class="n">Editable</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">HasText</span> <span class="nf">getPrimaryDisease</span><span class="o">();</span>
</span><span class='line'>      <span class="n">HasText</span> <span class="nf">getPrimaryDiagnosis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">HasValue</span><span class="o">&lt;</span><span class="n">Date</span><span class="o">&gt;</span> <span class="nf">getPrimaryDiseaseStart</span><span class="o">();</span>
</span><span class='line'>      <span class="n">HasValue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getHypertension</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// (...) and some more stuff here</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">HistoryDTO</span> <span class="n">currentDTO</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">DispatchAsync</span> <span class="n">dispatcher</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Inject</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">HistoryPresenter</span><span class="o">(</span><span class="kd">final</span> <span class="n">Display</span> <span class="n">display</span><span class="o">,</span> <span class="kd">final</span> <span class="n">EventBus</span> <span class="n">eventBus</span><span class="o">,</span> <span class="kd">final</span> <span class="n">DispatchAsync</span> <span class="n">dispatcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">display</span><span class="o">,</span> <span class="n">eventBus</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bind</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onBind</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Add handlers to the event bus if needed</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resetUI</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">currentDTO</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">display</span><span class="o">.</span><span class="na">resetUI</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">HistoryDTO</span> <span class="nf">getDTO</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">syncDTO</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">currentDTO</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">syncDTO</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// create new DTO object with the content from the display</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showDTO</span><span class="o">(</span><span class="n">HistoryDTO</span> <span class="n">dto</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// refresh the display with the data from the DTO</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEditable</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">display</span><span class="o">.</span><span class="na">setEditable</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRevealDisplay</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// React on place request e.g use the dispatcher to load the data from the server</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the gwt-presenter class hierarchy there was no possibility to define the model class the presenter will be responsible for. For that reason we introduced a <code>PresentDTO&lt;T></code> and <code>PresentDTOs&lt;T></code> interfaces to ensure the existence of <code>T getDTO()</code> etc. methods. The view classes are quite straightforward, the only difference is that back in 2009 ui:binder was not really there, therefore the gwt-presenter had no direct support for it. But switching to the declarative layout definition was indeed very easy &ndash; each view defines its own *.ui.xml file and the <code>asWidget()</code> method just returns the result of the <code>uiBinder.createAndBindUi()</code> call. As you can see in the code below we introduced also a <code>WidgetsManager</code> class which is a convinient way to managed all the widgets the view is defining (offering a general <code>setEditable()</code> method and taking care of the validation visualization).</p>

<figure class='code'><figcaption><span>View</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HistoryView</span> <span class="kd">implements</span> <span class="n">Display</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">interface</span> <span class="nc">HistoryViewUiBinder</span> <span class="kd">extends</span> <span class="n">UiBinder</span><span class="o">&lt;</span><span class="n">LayoutPanel</span><span class="o">,</span> <span class="n">HistoryView</span><span class="o">&gt;</span> <span class="o">{}</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">HistoryViewUiBinder</span> <span class="n">uiBinder</span> <span class="o">=</span> <span class="n">GWT</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">HistoryViewUiBinder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@UiField</span>
</span><span class='line'>  <span class="n">LabeledSuggestBox</span> <span class="n">renalDisease</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@UiField</span>
</span><span class='line'>  <span class="n">DateBox</span> <span class="n">renalDiseaseStart</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@UiField</span>
</span><span class='line'>  <span class="n">TextArea</span> <span class="n">renalDiseaseText</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@UiField</span>
</span><span class='line'>  <span class="n">ValueListBox</span> <span class="n">hypertension</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">WidgetsManager</span> <span class="n">widgetsManager</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">LayoutPanel</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Inject</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">HistoryView</span><span class="o">(</span><span class="n">WidgetsManager</span> <span class="n">widgetsManager</span><span class="o">,</span> <span class="kd">final</span> <span class="n">RegisterConstants</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">widgetsManager</span> <span class="o">=</span> <span class="n">widgetsManager</span><span class="o">;</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=</span> <span class="n">uiBinder</span><span class="o">.</span><span class="na">createAndBindUi</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="n">content</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">historyTab</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//Registering the widgets within the widget mgr.</span>
</span><span class='line'>      <span class="n">widgetsManager</span><span class="o">.</span><span class="na">registerWidgets</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;primaryDiseaseGroup&quot;</span><span class="o">,</span>
</span><span class='line'>                      <span class="s">&quot;primaryDiseaseDiagnosis&quot;</span><span class="o">,</span> <span class="s">&quot;primaryDiseaseStart&quot;</span><span class="o">},</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">Widget</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">renalDisease</span><span class="o">,</span>
</span><span class='line'>                      <span class="n">renalDiseaseText</span><span class="o">,</span>
</span><span class='line'>                      <span class="n">renalDiseaseStart</span><span class="o">});</span>
</span><span class='line'>      <span class="n">widgetsManager</span><span class="o">.</span><span class="na">configureValidation</span><span class="o">(</span><span class="n">HistoryDTO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Widget</span> <span class="nf">asWidget</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">HasText</span> <span class="nf">getPrimaryDiagnosis</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">renalDiseaseText</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">HasText</span> <span class="nf">getPrimaryDisease</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">renalDisease</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">HasValue</span><span class="o">&lt;</span><span class="n">Date</span><span class="o">&gt;</span> <span class="nf">getPrimaryDiseaseStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">renalDiseaseStart</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To ensure a loosely coupled client we try to communicate between the presenters only via the EventBus or PlaceRequests, so if a new part of the UI should be rendered, a new place event needs to be fired.</p>

<h2>2. Client &ndash; server communication</h2>

<p>The client &ndash; server communication is based fully on the GWT-RPC mechanism. As mentioned above we are using the gwt-dispatch library meaning that for every request, we have a command object, result object and a server side handler. It is a bit verbose, but in the end it is also a very simple pattern and every new dev introduced to our team grasps it very quickly. The implementation of the client-side caching is easily done, as you just need to compare the command object which should be executed and if one of them has been already seen, then you can serve the already received result saving you one round-trip.</p>

<p>To execute a command a corresponding object just needs to be passed to the dispatcher which is a singleton on the client and gets injected to every presenter that should be able to trigger the communication. In most of the cases the result of a command (or to use gwt-dispatch terminology: an action) contains a DTO object which is then shown by the presenter. On the server side we are using JPA &amp; Hibernate so obviously we need to take care of the server entity to DTO conversion. Although some libraries exists for this purpose (e.g <a href="http://sourceforge.net/projects/gilead/">gilead</a>), in our specific setting we decided to implement it ourself which was actually a straightforward task when using the reflection API and sticking to a well defined class hierarchy of our own. <img src="http://lplotni.github.io/images/dto.png" title="MVP with EventBus and Dispatcher" > We also use the JSR303 annotations for validation of the entities and are able to push the constraint violations back to the client where they will be assigned to the specific widgets by our <code>WidgetsManager</code> &ndash; here we are just using a simple convention of associating the input widgets with same names as the property paths in the entities.</p>

<h2>3. Testing the client</h2>

<p>One of the main advantages of doing MVP is the separation of the business logic (sitting in the presenter) from the actual UI components (being a part of the view) resulting in the ability of writing normal, fast unit test (normal, meaning not using the GWTTestCase) and mocking the views. Nevertheless in our project we use <a href="http://docs.seleniumhq.org/">selenium</a> as the main way to assure the correct functionality of our client. As using the normal selenium recorder is not an option with GWT due to the element ids changing during each compile process, we tried to get our selenium tests (written in java as normal unit tests) as independent as it only can be from the layout definition itself (trying not to use exact XPath etc.). Our client is very data input heavy, so we have a lot of input components to test. When we test if the entities get created in a correct way, we just access all visible input components of a certain type, populate them with a random content (which we then store for later comparison), trigger the save action and reload the UI to verify if the same components holds still the same data. Thus, we don&rsquo;t have to update the tests if our data definition changes and we have introduced some new input components. The test will also work if the layout of the UI changes either on purpose, because we rearranged it, or when a new GWT version switch to a different HTML representation for some standard widgets.</p>

<figure class='code'><figcaption><span>Getting certain elements from selenium driver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="nf">getVisibleElements</span><span class="o">(</span><span class="n">String</span> <span class="n">tagName</span><span class="o">,</span>
</span><span class='line'>          <span class="kd">final</span> <span class="n">String</span> <span class="n">classString</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="n">tagName</span><span class="o">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="n">Collections2</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="nd">@Override</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">WebElement</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">String</span> <span class="n">classAttribute</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;class&quot;</span><span class="o">);</span>
</span><span class='line'>                          <span class="n">b</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">isDisplayed</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">classAttribute</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                                  <span class="o">&amp;&amp;</span> <span class="n">classAttribute</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">classString</span><span class="o">);</span>
</span><span class='line'>                      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">StaleElementReferenceException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="c1">// Ignoring stale element</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Issues</h2>

<p>We are quite happy how things are working now, but there is room for improvement:</p>

<ul>
<li><strong>The compile time during development</strong>: trying to change something in the client code in a iterative manner using the standard <strong>DevMode</strong> is very frustrating as it takes just too much time. <strong>SuperDevMode</strong> improved a lot our situation but we still have the problem of having the server and client side in one maven project &ndash; changing the server-side code means a <code>mvn clean -DskipTests tomcat7:run-war</code> and this means basically an &ldquo;espresso&rdquo; break.</li>
<li><strong>The size of the client</strong>: our *.cache.js file is currently 6.1MB (we use the gwtquery and gwt-chosen libs which are quite large) We will definitely try to introduce some code splitting in the future release, to load only as much as we need and not everything from the beginning.</li>
<li><strong>Execution time of the selenium tests</strong>: our current selenium suite takes a bit over 3 hours to run on our CI server. And although we could, we don&rsquo;t have enough of the presenter unit tests to have a sufficient coverage letting us sleep well at night. Here probably a wrong choice have been made: concentrating to much on the selenium tests and trying to go for a very exhaustive test suite, instead of implementing a good amount of unit tests for the presenters and a simpler selenium suite for the main work flows in the application.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up...]]></title>
    <link href="http://lplotni.github.io/blog/2013/05/14/setting-up-dot-dot-dot/"/>
    <updated>2013-05-14T17:46:00+02:00</updated>
    <id>http://lplotni.github.io/blog/2013/05/14/setting-up-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>There&rsquo;s nothing like this moment, when you have a big smile on your face, because you&rsquo;re just stunned how well things are working and how simple the set-up process was. <a href="http://octopress.org">Octopress</a> is just amazing. <strong>Period</strong>. If you haven&rsquo;t heard about it and you&rsquo;re thinking to start a blog or migrate one, then you should definitely check it out. To put it simple:</p>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages. To start blogging with Jekyll, you have to write your own HTML templates, CSS, Javascripts and set up your configuration. But with Octopress All of that is already taken care of. Simply clone or fork Octopress, install dependencies and the theme, and you&#8217;re set.</p><footer><strong>Brandon Mathis</strong> <cite><a href='http://octopress.org/blog/2011/07/23/octopress-20-surfaces/'>octopress.org/blog/2011/07/23/&hellip;</a></cite></footer></blockquote>


<p>It took me just few hours from having the idea: <em>Today is the day to start my own blog</em> to actually having it hosted on github. And the experience itself (checking out the octopress repo, configuring, building and deploying to github) was really simple. Thumbs up for the good documentation!</p>

<h2>My setup</h2>

<ol>
<li><strong>octopress</strong> is publishing directly to my github user page. Therefore the access is fairly simple and I can use my blog to link to other stuff, I have on github or somewhere else like e.g. slides to my talks.</li>
<li>I decided against using the default theme and went with a clean and responsive one called the <a href="https://github.com/lucaslew/whitespace">whitespace</a>. There are many, many others so everyone should be able to find something suiting own needs. A list with some of the themes available: <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd-Party-Octopress-Themes</a></li>
</ol>


<!--more-->


<ol>
<li>During the set-up phase I had only one ubuntu-related (using the 13.04) hickup. When executing the <code>bundle install</code> I got an missing dependency error, so after googling for like a minute, I found a simple solution: just execute <code>sudo apt-get install ruby1.9.1-full</code> and everything will work as described in octopress docs.</li>
<li>As I&rsquo;m a <strong>zsh</strong> and <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> user, I run also into the <code>rake new_post[title]</code> execution problem. A solution for it was also easily found: just add <code>alias rake=&ldquo;noglob rake&rdquo;</code> to your <code>~/.zshrc</code>.</li>
<li>To be able to see, if anybody actually reads this stuff, I activated the support for google analytics in the <code>_config.yml</code> file.</li>
<li>I also activated <a href="http://disqus.com">disqus</a> to support comments. Although I&rsquo;ve never heard about it, it makes a very nice impression and as everything till now, was very easy to set-up (create an account, get unique id and put it into the <code>_config.yml</code> file). I deactivated all the <strong>discovery</strong> stuff from disqus though, as I&rsquo;m not interested in monetizing anything here.</li>
</ol>


<p>If you read it till now, you may be asking yourself <blockquote><p>OK, yet another possibility to create a blog. So what. Why bother with all this stuff when one can just use blogger or wordpress.com.</p></blockquote> My answer:</p>

<h2>Killer features &amp; the work-flow</h2>

<ol>
<li>Everything is hosted on github within my repository and I have control over all the files etc.</li>
<li>To create a new blog post you just type <code>rake new_post[&lsquo;some title&rsquo;]</code> and open the created file to edit the content. Everything will be written in markdown (<strong>+1</strong>), so I&rsquo;m using <a href="http://www.sublimetext.com/">sublime</a> as my editor and the <strong>distraction free mode</strong> when writing&hellip;</li>
<li>When you work on a new post or a change then you can tweak and test everything on your local machine under <code>localhost:4000</code> with each change made automatically visible thanks to <code>rake watch</code> and <code>rake preview</code></li>
<li>Everything is manged by git, so you can work on posts in branches etc.</li>
<li>When you&rsquo;re done, you just hit <code>rake generate</code> and <code>rake deploy</code> and the new stuff will be pushed to github.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://lplotni.github.io/blog/2013/05/09/hello-world/"/>
    <updated>2013-05-09T18:54:00+02:00</updated>
    <id>http://lplotni.github.io/blog/2013/05/09/hello-world</id>
    <content type="html"><![CDATA[<p>I had this idea to create my own blog since like forever but always convinced myself that it will be either too time consuming or all the topics I would like to write about, are already well described, so what&rsquo;s the point&hellip;</p>

<p>But then, I had also too many moments, when I thought &ndash; wait, you already had this problem/issue/idea&hellip; What was the solution? Where did you find it?</p>

<p>So today, I finally decided to create my own blog &ndash; mainly as a reference for future me. I will write about the technology, I&rsquo;m currently working with or interested in and from time to time maybe about some general stuff, I would like to talk about.</p>

<p>As I have no experience whatsoever in this domain (blog writing), I will try to push myself and write one post per month. Fingers crossed, that I&rsquo;ll find the time for it&hellip;</p>
]]></content>
  </entry>
  
</feed>
